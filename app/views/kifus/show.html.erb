<p id="notice"><%= notice %></p>

<style>

  div#contents_area {
    width: 503px;
    margin: 30px auto 40px auto;
  }

  div#goban_area {
    margin-top: 30px;
    width: 500px;
    border-top: solid 1px #aaccaa;
    border-left: solid 1px #aaccff;
    border-right: solid 1px #aaccff;
    border-bottom: solid 1px #aaccff;
  }

  img.button {
    width: 45px;
    height: 45px;
    margin: 8px;
  }

  img.large_button {
    width: 70px;
    height: 70px;
    margin-left: 15px;
    margin-right: 15px;
    margin-bottom: 10px;
  }

  div.open_button {
    /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#f6f8f9+0,c7deea+90,3a9cd8+95,e6edf4+100 */
    background: rgb(246,248,249);
    background: -moz-linear-gradient(top, rgba(246,248,249,1) 0%, rgba(199,222,234,1) 90%, rgba(38,116,246,1) 95%, rgba(230,237,244,1) 100%);
    background: -webkit-linear-gradient(top, rgba(246,248,249,1) 0%,rgba(199,222,234,1) 90%,rgba(38,116,246,1) 95%,rgba(230,237,244,1) 100%);
    background: linear-gradient(to bottom, rgba(246,248,249,1) 0%,rgba(199,222,234,1) 90%,rgba(38,116,246,1) 95%,rgba(230,237,244,1) 100%);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f6f8f9', endColorstr='#e6edf4',GradientType=0 ); /* IE6-9 */

    font-size: 14pt;
    padding: 10px;
    margin: 0;
    cursor: pointer;
  }

  div#play_info {
    padding-top: 30px;
    padding-left: 30px;
    margin-bottom: 30px;
  };

  div#goban_board {
    padding-bottom: 30px;
  }

  div#operation_button_area {
    padding-left: 5px;
    padding-top: 15px;
    padding-bottom: 15px;
    margin-bottom: 10px;
  }

  div#tree_area {
    padding: 0px;
    margin: 0px;
  }

  div#sgfarea {
    width: 450px;
    height: 100px;
    word-wrap: break-word;
    padding: 20px;
    overflow: auto;
  }

  input[type="text"], input[type="number"], textarea, select {
    outline: none;
    border: 1px solid #aaa;
  }

</style>

<script>
  var ClickEventUtil = function() {
    var ClickConst = {
      MOVE:  1,
      BLACK: 2,
      WHITE: 3,
      ERASE: 4
    }

    var clickType = ClickConst.MOVE;

    this.set_move_type = function() {
      clickType = ClickConst.MOVE;
    }

    this.set_or_put_stone = function(player, i, j) {
      switch (clickType) {
      case ClickConst.BLACK:
        player.setStone(i, j, StoneType.BLACK);
        break;
      case ClickConst.WHITE:
        player.setStone(i, j, StoneType.WHITE);
        break;
      case ClickConst.ERASE:
        player.setStone(i, j, StoneType.NONE);
        break;
      default:
        player.putStone(i, j);
      }
    }

    this.handle_change_operation= function() {
      switch (clickType) {
      case ClickConst.MOVE:
        clickType = ClickConst.BLACK;
        break;
      case ClickConst.BLACK:
        clickType = ClickConst.WHITE;
        break;
      case ClickConst.WHITE:
        clickType = ClickConst.ERASE;
        break;
      case ClickConst.ERASE:
      default:
        clickType = ClickConst.MOVE;
      }
    }

    this.get_operation_img_filename = function() {
      var filename = null;
      switch (clickType) {
      case ClickConst.MOVE:
        filename = player.rule.getNextStone() == StoneType.BLACK ? "b.png" : "w.png";
        break;
      case ClickConst.BLACK:
        filename = "ab.png";
        break;
      case ClickConst.WHITE:
        filename = "aw.png";
        break;
      case ClickConst.ERASE:
        filename = "ae.png";
        break;
      }

      return filename;
    }
  }

  var click_event_util = new ClickEventUtil();

  var createDrawer = function(player, opt) {
    var gobanCanvas = document.getElementById("goban_canvas");
    if (!gobanCanvas || !gobanCanvas.getContext)
      return false;

    var treeCanvas  = document.getElementById("tree_canvas");
    if (!treeCanvas || !treeCanvas.getContext)
      return false;

    var factory = new DefaultGoDrawerFactory();
    var goban_drawer = factory.create(player, gobanCanvas.getContext('2d'), opt);
    var treeDrawer   = new TreeDrawer(player, treeCanvas, treeCanvas.getContext('2d'));
    
    var env = goban_drawer.env;
    var downPos = {};

    gobanCanvas.addEventListener("click", function(e) {
      e.preventDefault(e);
      var p = env.mouseEventToIJ(e);
      var r = e.target.getBoundingClientRect();
      if (p.i    == downPos.p.i    &&
          p.j    == downPos.p.j    &&
          r.left == downPos.r.left &&
          r.top  == downPos.r.top) {
        click_event_util.set_or_put_stone(player, p.i, p.j);
      }
    });

    player.addListener(function() {
      treeDrawer.resetPosition();
      treeDrawer.draw();
    });

    gobanCanvas.addEventListener("mousedown", function(e) {
      e.preventDefault(e);
      downPos.p = env.mouseEventToIJ(e);
      downPos.r = e.target.getBoundingClientRect();
    });

    player.addListener(function() {
      goban_drawer.draw();
    });

    return true;
  }

  var create_player = function() {
    try {
      var tree = IgoTreeFactory.createBySgf(<%= raw @kifu.sgfdata.to_json %>);
      return new IgoPlayer(tree);
    } catch(e) {
      alert(e.message);
      return;
    }
  }

  var PropField = function() {
    var key_prop_pairs = [
      ['black_player', "PB"],
      ['white_player', "PW"],
      ['black_rank'  , "BR"],
      ['white_rank'  , "WR"],
      ['komi'        , "KM"],
      ['result'      , "RE"]
    ];

    this.update_field = function(player) {
      for (var i = 0; i < key_prop_pairs.length; i++) {
        var a = key_prop_pairs[i];
        $('#' + a[0]).val(player.sgfTree.getRoot().getProperty(a[1]));
      }
    }

    this.update_player = function(player) {
      for (var i = 0; i < key_prop_pairs.length; i++) {
        var a = key_prop_pairs[i];
        var val = $('#' + a[0]).val();
        if (val !== undefined)
          player.sgfTree.getRoot().setProperty(a[1], val);
      }
    }
  };

  var DateField = function() {
    var get_date = function() {
      var date = undefined;
      var y = $('#info_infodate_1i').val();
      var m = $('#info_infodate_2i').val();
      var d = $('#info_infodate_3i').val();
      if (y && m && d) {
        date = y + "-" + ("0" + m).slice(-2) + "-" + ("0" + d).slice(-2);
      }
      return date;
    }

    this.update_field = function(player) {
      var dt = player.sgfTree.getRoot().getProperty("DT");
      if (dt) {
        var m = dt.match(/(\d\d\d\d)[\-\/](\d\d)[\-\/](\d\d)/);

        if (m && m.length == 4) {
          $('#info_infodate_1i').val(Number(m[1]));
          $('#info_infodate_2i').val(Number(m[2]));
          $('#info_infodate_3i').val(Number(m[3]));
        }
      }
    }

    this.update_player = function(player) {
      player.sgfTree.getRoot().setProperty("DT", get_date());
    }
  };

  var CommentField = function() {
    this.update_field = function(player) {
      var c = player.sgfTree.current.getProperty("C");
      $('#comment').val(c ? c : "");
    }

    this.update_player = function(player) {
      var c = $('#comment').val();
      if (c)
        player.sgfTree.current.setProperty("C", c);
      else
        player.sgfTree.current.removeProperty("C");
      player.notify();
    }
  };

  var SgfArea = function() {
    function scroll_down(id) {
      var obj = document.getElementById(id);
      if(obj)
        obj.scrollTop = obj.scrollHeight;
    }

    this.update_sgf_area = function(player) {
      $('#sgfarea').text(player.sgfTree.toSgf());
      scroll_down('sgfarea');
    }
  };

  var player = create_player();
  var option = {
    bgColor:             'rgb(252, 247, 242)',
    blackStoneColor:     "black",
    whiteStoneColor:     "rgb(210, 210, 210)",
    blackStoneImagePath: "/images/black.png",
    whiteStoneImagePath: "/images/white.png",
    boardImagePath:      "/images/wood.png",
  };

  function number_button() {
    option.stoneNumber = !option.stoneNumber;
    player.notify();
  }

  function move_button() {
    click_event_util.set_move_type();
    player.changeStone();
  }

  function change_stone_button() {
    click_event_util.handle_change_operation();
    apply_stone_button_image();
  }

  function apply_stone_button_image() {
    var filename = click_event_util.get_operation_img_filename();
    if (filename)
      document.getElementById("stone_button").src = "/images/" + filename;
  }

  var prop_field = new PropField();
  var date_field = new DateField();
  var comment_field = new CommentField();
  var sgf_area = new SgfArea();

  function submit_action() {
    if (!player)
      return;

    prop_field.update_player(player);
    date_field.update_player(player);
    $("#sgfdata_field").val(player.sgfTree.toSgf());
  }

  $(function() {
    if (!player)
      return;

    var ret = createDrawer(player, option);
    if (!ret)
      return;

    player.addListener(function() {
      apply_stone_button_image();
      comment_field.update_field(player);
      sgf_area.update_sgf_area(player);
    });

    apply_stone_button_image();
    player.updateGoban();
    prop_field.update_field(player);
    date_field.update_field(player);

    $('#comment').bind('input', function() {
      comment_field.update_player(player);
    });
  });

  $(function() {
    $("div.open_button").on('click', function() {
      $(this).next().slideToggle();
    }).each(function() {
     if ($(this).attr("id") != "board_open_button")
        $(this).next().hide();
    });
  });

</script>


<div id=contents_area>

 <%= link_to '戻る', sec_room_path(@kifu.room) %>
 <%= form_for(@kifu, html: {onsubmit: "return submit_action();"}) do |f| %>
   <%= hidden_field_tag :ktok, @kifu.key %>
   <%= f.hidden_field :sgfdata, id: "sgfdata_field"  %>
   <div class="actions" style="float: right;">
     <%= f.submit %>
   </div>
 <% end %>

 <div id=goban_area>
    <div class=open_button>対局情報</div>
    <div id=play_info>
      <table>
      <tr>
      <th>対局日</th>
      <td><%= date_select :info, :infodate, include_blank: true %></td>
      </tr>

      <tr>
      <th>黒番</th>
      <td><%= text_field_tag :black_player, '', style: "width: 218px;" %></td>
      </tr>

      <tr>
      <th>白番</th>
      <td><%= text_field_tag :white_player, '', style: "width: 218px;" %></td>
      </tr>

      <tr>
      <th>棋力(黒)</th>
      <td><%= select_tag :black_rank, options_for_select(@rank_list) %></td>
      </tr>

      <tr>
      <th>棋力(白)</th>
      <td><%= select_tag :white_rank, options_for_select(@rank_list) %></td>
      </tr>

      <tr>
      <th>コミ</th>
      <td><%= number_field_tag :komi, 6.5, size: 3, step: 0.5, style: "width: 50px" %></td>
      </tr>

      <tr>
      <th>対局結果</th>
      <td><%= text_field_tag :result, '', style: "width: 218px;" %></td>
      </tr>
      </table>
      <%= text_area_tag :comment, '', size: "33x3" %>
    </div>

    <div class=open_button>SGF</div>
    <div id="sgfarea"></div>

    <div class=open_button>木</div>
    <div id=tree_area><canvas id="tree_canvas" width=500px height=200px></canvas></div>

    <div class=open_button id=board_open_button>碁盤<p style="font-size: 70%; display: inline;"> <%= @kifu.sgf_node_facade.title %></p></div>
    <div id=goban_board>
      <canvas id="goban_canvas" width=500px height=500px></canvas>
      <div id=operation_button_area>
        <img src="/images/btn_begin.png"    class="button" onclick="player.backToHead();" />
        <img src="/images/btn_bback.png"    class="button" onclick="player.backN(10);" />
        <img src="/images/btn_back.png"     class="large_button" onclick="player.back();" />
        <img src="/images/btn_forward.png"  class="large_button" onclick="player.forward();" />
        <img src="/images/btn_fforward.png" class="button" onclick="player.forwardN(10);" />
        <img src="/images/btn_end.png"      class="button" onclick="player.forwardToTail();" />
        <br />
        <img src="/images/btn_pass.png"     class="button" onclick="player.pass();" />
        <img src="/images/btn_cut.png"      class="button" onclick="player.cut();" />
        <img src="/images/number.png"       class="button" onclick="number_button();" />
        <img src="/images/change.png"       class="button" onclick="move_button();" />
        <img id="stone_button" class="button" onclick="change_stone_button();" />
      </div>
    </div>

 </div>

</div>


